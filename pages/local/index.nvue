<template>
	<div class="content">
		<chunlei-video 
			v-if="videoList.length!=0"
			ref="video"
			class="video"  
			:index="index" 
			color="#c93756"
			:title="videoList[index].title"
			@fullscreenchange="fullscreenchange"
			:srcList="videoList[index].srcList" 
			:gDuration="videoList[index].gDuration" 
		>
		
		</chunlei-video>
		
		<div class="progress-box" v-for="(item,index) in videoList" :key="index" v-if="!fullScreen">
			<image src="../../static/video.png" class="box-image"></image>
			<div class="box-content">
				<!-- <progress :percent="item.progress" stroke-width="3" /> -->
				<text class="box-text">{{item.title}}</text>
			</div>
			<button @click="clickVideo(index)" class="box-btn" plain>打开</button>
		</div>
	</div>
</template>

<script>
	import chunleiVideo from '@/components/chunlei-video/chunlei-video.nvue'
	export default { 
		components:{
			chunleiVideo
		},
		data() {
			return {
				videoList:[],
				index:0 ,
				fullScreen: false,
				i:0,
				downloadLength:0
			}
		},
		async created() {
			//#ifdef APP-PLUS
			plus.screen.lockOrientation("portrait-primary")
			//#endif
			
		},
		async mounted() {
			await this.pushVideoList()
			setTimeout(() =>{
				if(this.videoList.length==0){
					uni.showToast({title:'无本地视频快去下载吧,安卓可能存在bug具体见文档',icon:'none'})
				}else{
					this.$refs.video.videoPlay()
				}
			}, 200);
			
		},
		onShow() {
			
			this.downloadLength = getApp().globalData.downloadLength
			//展示播放
			if(typeof this.$refs.video!='undefined' && this.videoList.length!=0) this.$refs.video.pageShow()
		
		},
		onHide() {
			//隐藏暂停播放
			if(this.videoList.length!=0){ this.$refs.video.pageHide() }
		},
		methods: {
			clickVideo(index){
				this.index = index
			},
			fullscreenchange(e){
				this.fullScreen = e
			},
			pushVideoList(){
				let promise = new Promise((resolve,reject)=>{
					this.videoList = []
					plus.io.requestFileSystem( plus.io.PUBLIC_DOWNLOADS, (fs)=>{
						// fs.root是根目录操作对象DirectoryEntry
						// 创建读取目录信息对象 
						var directoryReader = fs.root.createReader();
						directoryReader.readEntries( ( entries )=>{
							
							if(entries.length==0) resolve()
							for(let i=0; i < entries.length; i++ ) {
								//获取路径
								entries[i].file( (file) => {
									//获取时长
									this.getVideoInfoBy(file,resolve,entries.length)
								} );
							}
						})
					}, function ( e ) {
						console.log( "Read entries failed: " + e.message );
					} );
				} );
				return promise
			},
			getVideoInfoBy(file,resolve,length){
				
				plus.io.getVideoInfo({
					filePath:"file://"+file.fullPath,
					success:(videoInfo)=>{
						//本地支持mp4 flv
						this.videoList.push({
							srcList:"file://"+file.fullPath,
							title: file.name,
							gDuration:videoInfo.duration, //大概总时长
						})
					},
					fail:()=>{

					},
					complete:()=>{
						this.i++
						//回调结束
						
						if(this.i==length) resolve()
					}
				})
			}
		},
		watch:{
			downloadLength:{
				handler:async function(newVal,oldVal){
					await this.pushVideoList()
				}
			}
		}
	}
</script>

<style>
	
	.content {
		
		width: 750rpx;
		align-items: center;
	}
	
	.video{
		height: 200px;
		width: 750rpx;
	}

	.btn{
		width: 500rpx;
		marginTop:50rpx;
	}
	.progress-box{
		padding: 40rpx;
		height: 150rpx;
		marginTop:50rpx;
		border-radius: 5px;
		border-color: #e9e7ef;
		border-style: solid;
		border-width: 2px;
		flex-direction: row;
		justify-content: center;
		align-items: center;
	}
	.box-content{
		width: 300rpx;
		padding: 20rpx;
		justify-content: center;
	}
	
	.box-btn{
		height: 80rpx;
		width: 100rpx;
		border-color: #161823;
	}
	.box-image{
		height: 80rpx;
		width: 80rpx;
	}
	.box-text{
		font-size: 16px;
	}
</style>
