<template>
	<view class="video-box">
		<video :controls="false" :show-center-play-btn="false" :show-fullscreen-btn="false" :show-progress="false"
			:objectFit="objectFit" :direction="direction" :src="src" 
			 @fullscreenchange="changeScreen" @timeupdate="timeupdate" 
			id="chunleiVideo" ref="chunleiVideo" class="video">
			<cover-view  class="video-view" v-if="!fullScreen" :style="{ width: `750rpx`,height: `200px` }">
				<div  class="move-view" @touchend="videoTouchEnd" @touchmove="videoTouchMove" @touchstart="videoTouchStart" :style="{ width: `200px`,height: `750rpx` }"></div>
			</cover-view>
			<cover-view  class="video-view" v-if="fullScreen" :style="{ width: `${fullControlsWidth}px`,height: `${fullControlsHeigt}px` }">
				<div  class="move-view" @touchend="videoTouchEnd" @touchmove="videoTouchMove" @touchstart="videoTouchStart" :style="{ width: `${fullControlsWidth}px`,height: `${fullControlsHeigt}px` }"></div>
			</cover-view>
			<cover-view class="controls-view" v-if="!fullScreen&&showControls" @click.stop="">
				<text class="list-icon" @click.stop="videoPlay" v-if="play">&#xe503;</text>
				<text class="list-icon" @click.stop="videoPlay" v-if="!play">&#xe74f;</text>
				
				<text class="list-title">{{currentDuration}}</text>
				<slider class="video-slider" block-size="20" :max="duration" :value="current" @change="changeCurrent"></slider>
				<text class="list-title">{{lastDuration}}</text>
				<text class="list-icon" @click="tapFullScreen">&#xe651;</text>
			</cover-view>
			<!-- 滑动video时显示 -->
			<cover-view class="current-view" v-if="!fullScreen&&touchType=='current'">
				<div class="current-top">
					<text class="list-title" style="marginRight:0;">{{touchCurrentDuration}}/{{lastDuration}}</text>
					
				</div>
				<div class="current-bottom">
					<div class="current-progress" :style="{width: `${touchCurrent/duration*260}rpx`}"> </div>
				</div>
				
			</cover-view>
			<cover-view class="rate-view" @click.stop="" v-if="!rateView&&!fullScreen">
				<text class="list-title" @click="rateView=true">{{rate}}x</text>
			</cover-view>
			<cover-view class="rate" @click.stop="" v-if="rateView&&!fullScreen">
				<div class="rate"  @click.stop="rateView=false" :style="{paddingTop: '40px'}">
					<div>
						<text class="list-title">倍速播放</text>
					</div>
					
					<div class="rate-list">
						<text class="list-title" @click.stop="tapRate(item)" v-for="item in rateList" :key="item">{{item}}x</text>
					</div>
				</div>
			</cover-view>
			
			
			<!-- 全屏 -->
			<cover-view class="controls-top" :style="{ width: `${fullControlsWidth}px`,transform: `translateY(${-controlsY}px)` }" @click.stop="" v-if="fullScreen&&showControls&&!lock">
				<div class="top-left">
					<text class="full-icon" @click="tapFullScreen">&#xe60a;</text>
					<text class="full-title">{{title}}</text>
				</div>
				<div class="top-right">
					<text class="full-icon">&#xe642;</text>
					<text class="full-icon">{{nowTime}}</text>
				</div>
			</cover-view>
			<!-- 滑动video时显示 -->
			<cover-view class="fullCurrent-view" v-if="fullScreen&&touchType=='current'" :style="{ left: `${fullControlsWidth/2-75}px`}">
				<div class="fullCurrent-top">
					<text class="full-title" style="marginRight:0;">{{touchCurrentDuration}}/{{lastDuration}}</text>
					
				</div>
				<div class="fullCurrent-bottom">
					<div class="fullCurrent-progress" :style="{width: `${touchCurrent/duration*110}px`}"> </div>
				</div>
				
			</cover-view>
			<!-- 滑动video时显示音量 -->
			<cover-view class="fullCurrent-view" v-if="fullScreen&&touchType=='volume'" :style="{ left: `${fullControlsWidth/2-75}px`}">
				<div class="fullCurrent-top">
					<text class="full-title" style="marginRight:0;">音量</text>
					
				</div>
				<div class="fullCurrent-bottom">
					<div class="fullCurrent-progress" :style="{width: `${touchVolume*110}px`}"> </div>
				</div>
				
			</cover-view>
			<!-- 滑动video时显示亮度 -->
			<cover-view class="fullCurrent-view" v-if="fullScreen&&touchType=='bright'" :style="{ left: `${fullControlsWidth/2-75}px`}">
				<div class="fullCurrent-top">
					<text class="full-title" style="marginRight:0;">亮度</text>
					
				</div>
				<div class="fullCurrent-bottom">
					<div class="fullCurrent-progress" :style="{width: `${touchBright*110}px`}"> </div>
				</div>
				
			</cover-view>
			<cover-view class="fullControls-view" :style="{ width: `${fullControlsWidth}px`,transform: `translateY(${controlsY}px)` }" @click.stop="" v-if="fullScreen&&showControls&&!lock">
				<text class="full-icon" @click="videoPlay" v-if="play">&#xe503;</text>
				<text class="full-icon" @click="videoPlay" v-if="!play">&#xe74f;</text>
				<!-- <text class="full-icon" @click="playNext">&#xe615;</text> -->
				<text class="full-title">{{currentDuration}}</text>
				<chunLei-slider :max="duration" :value="current" :style="{width:`${fullControlsWidth-200}px`}" :width="fullControlsWidth-200" @change="changeCurrent"></chunLei-slider>
				<!-- <slider class="video-slider" block-size="20" :max="duration" :value="current" @change="changeCurrent"></slider> -->
				<text class="full-title" :style="{marginLeft:`20rpx`}">{{lastDuration}}</text>
			</cover-view>
			
					
			<cover-view class="lock-view" @click.stop="" v-if="fullScreen&&showControls" :style="{ top:`${fullControlsHeigt/2}px` }">
				<text class="full-icon" v-if="!lock" style="margin:0" @click.stop="clickLock">&#xe8dd;</text>
				<text class="full-icon" v-if="lock" style="margin:0" @click.stop="clickLock">&#xe61d;</text>
			</cover-view>
			
			
	
			
		</video>
		
	</view>
</template>

<script>
	import chunLeiSlider from '../chunLei-slider/chunLei-slider.nvue'
	export default{ 
		components:{
			chunLeiSlider
		},
		props:{
			src:{ //要播放视频的资源地址
				type:String,
				default:''
			},
			title:{ //视频标题
				type:String,
				default:''
			},
			duration:{ //总时长（单位：s）
				type:Number,
				default:0
			}
		},
		data(){
			return{
				controls:false,
				videoCtx:'',//视频上下文
				current: 0, //video进度
				play: false,//播放状态
				fullScreen: false,//全屏状态
				direction: -90,//全屏方向
				objectFit:'contain',
				fullControlsWidth:'',//全屏宽
				fullControlsHeigt:0,//全屏高
				showControls:true,//显示控制
				oldValue:{},//触摸开始 进度，音量，亮度
				nowTime:'',//当前时间
				lock:false,//锁屏
				controlsY:0,//全屏后Y动画
				oldTouces:{},
				touchType: null,//滑动类型
				platform:'',
				rate:'1.0',
				rateView:false,
				rateList:['0.5','0.8','1.0','1.25','1.5'],//倍数
				touchCurrent:0,
				touchBright:0,
				touchVolume:0
			}
		},
		beforeCreate() {
			// #ifdef APP-PLUS-NVUE
			var domModule = weex.requireModule('dom');
			domModule.addRule('fontFace', {
				'fontFamily': "texticons",
				'src': "url('../../static/text-icon.ttf')"
			});
			// #endif
			uni.getSystemInfo({
				success: (e) => {
					// #ifndef MP
					this.platform = e.platform
					// #endif
				}
			})
		},
		created() {
			this.fullControlsWidth  = uni.getSystemInfoSync().screenHeight
			this.fullControlsHeigt = uni.getSystemInfoSync().screenWidth
		},
		mounted() {
			this.videoCtx = uni.createVideoContext('chunleiVideo',this);
			//#ifndef APP-PLUS-NVUE 
			this.videoCtx.play();
			this.videoCtx.pause();
			//#endif
		},
		methods:{
			timeupdate(event){
				
				if(this.current>=this.duration) {
					this.play = false
					return
				}
				this.current = this.current + 0.25*this.rate
			},
			//拖动滑块
			changeCurrent(e){
				this.current = e.detail.value
				this.videoCtx.seek(this.current)
			},
			//倍速播放
			tapRate(rate){
				this.rateView = !this.rateView
				this.videoCtx.playbackRate(rate*1)
				this.rate = rate
			},
			videoPlay(){
				if(!this.play){
					this.videoCtx.play();
					if(this.current>=this.duration) this.current=0
				}else{
					this.videoCtx.pause();
				}
				this.play = !this.play
			},
			tapFullScreen(){
				this.showControls = false
				if(!this.fullScreen){
					this.videoCtx.requestFullScreen({direction: this.direction})
				}else{
					this.videoCtx.exitFullScreen()
				}
				
				
				
			},
			clickVideo(){
				this.showControls = !this.showControls
				if(this.showControls){
					this.controlsY = 40
					this.nowTime = this.getNowTime()
					this.animateControls(0,4)
				}else{
					this.controlsY = 40
				}
			},
			//下一集
			playNext(){
				console.log('下一集')
			},
			clickLock(){
				
				this.lock = !this.lock
			},
			animateControls(distance,speed){
				const temp = setInterval(() => {
					if (this.controlsY > distance) {
						this.controlsY = this.controlsY - speed
						
					} else {
						this.controlsY = 0
						clearInterval(temp)
					}
				}, 40)
			},
			// 触摸开始
			videoTouchStart(e) {
				
				this.oldTouces = e.changedTouches[0]
				// 触摸开始的值
				this.oldValue = {
					current: this.current
				}
				//#ifdef APP-PLUS-NVUE
				this.oldValue = {
					...this.oldValue,
					volume:plus.device.getVolume()
				}
				
				//#endif
				//#ifndef H5
				uni.getScreenBrightness({
				    success:(res) => {
				        this.oldValue = {
							...this.oldValue,
							bright:res.value
						}
				    }
				});
				//#endif
			},
			// 计算方向
			videoTouchMove(e) {
				if(this.lock) return
				
				let { oldTouces,oldValue,touchType } = this
				let newTouces = e.changedTouches[0]
				
				if(!this.touchType){
					//进度控制
					this.touchType = Math.abs( newTouces.pageX - oldTouces.pageX ) > 20 ? 'current' : null
					//全屏下支持音量和亮度
					
					if(this.fullScreen&&!this.touchType){
						//#ifdef APP-PLUS-NVUE
						this.touchType = Math.abs( newTouces.pageY - oldTouces.pageY ) > 20 && newTouces.pageX<=200 ? 'volume' : this.touchType
						//#endif
						//#ifndef H5
						this.touchType = Math.abs( newTouces.pageY - oldTouces.pageY ) > 20 && newTouces.pageX>200 ? 'bright' : this.touchType
						//#endif
					}
				}else if(this.touchType=='volume'){
					this.touchVolume = ( oldTouces.pageY - newTouces.pageY)/200*1*2 + this.oldValue[touchType]
					this.touchVolume = this.touchVolume > 1? 1 : this.touchVolume
					this.touchVolume = this.touchVolume < 0? 0 : this.touchVolume
				}else if(this.touchType=='bright'){
					this.touchBright = ( oldTouces.pageY - newTouces.pageY)/200*1*2 + this.oldValue[touchType]
					this.touchBright = this.touchBright > 1? 1 : this.touchBright
					this.touchBright = this.touchBright < 0? 0 : this.touchBright
				}else if(this.touchType=='current'){
					this.touchCurrent = (newTouces.pageX - oldTouces.pageX)/250*this.duration*2 + this.oldValue[touchType]
					this.touchCurrent = this.touchCurrent > this.duration? this.duration : this.touchCurrent
					this.touchCurrent = this.touchCurrent < 0? 0 : this.touchCurrent
				}
				
			},
			// 结束触摸
			videoTouchEnd(e) {
				if(this.touchType=='current'){
					this.current = this.touchCurrent
					this.videoCtx.seek(this.current)
				}else if(this.touchType=='bright'){
					
					//#ifndef H5
					uni.setScreenBrightness({
					    value: this.touchBright.toFixed(2),
					    success: ()=> {
							setTimeout(() => {
								if(this.play) this.videoCtx.play();
							}, 200);
							
					    }
					});
					//#endif
				}else if(this.touchType=='volume'){
					//#ifdef APP-PLUS-NVUE
					plus.device.setVolume(this.touchVolume.toFixed(2))
					//#endif
				}else if(!this.touchType){
					this.clickVideo()
				}
				
				this.touchType = null
				
			},
			changeScreen(){
				this.showControls = false
				this.fullScreen = !this.fullScreen
			},
			getLevel(){
				level = 1
				//#ifdef APP-PLUS-NVUE
				if(this.platform == 'android'){
					//注意，安卓需要配置下manifest.json文件，打开后，进入模块权限配置，在右侧的Android权限设置里勾选上android.permission.BATTERY_STATS
					var main = plus.android.runtimeMainActivity();  
					var Intent = plus.android.importClass('android.content.Intent');  
					var recevier = plus.android.implements('io.dcloud.feature.internal.reflect.BroadcastReceiver', {  
					        onReceive: function(context, intent) {  
					        var action = intent.getAction();  
					        if (action == Intent.ACTION_BATTERY_CHANGED) {  
					            level   = intent.getIntExtra("level", 0); //电量  
					            var voltage = intent.getIntExtra("voltage", 0); //电池电压  
					            var temperature = intent.getIntExtra("temperature", 0); //电池温度  
								return level
					        }  
					     }  
					 });  
					var IntentFilter = plus.android.importClass('android.content.IntentFilter');  
					var filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);  
					main.registerReceiver(recevier, filter);
				}else if(this.platform == 'ios'){
					var UIDevice = plus.ios.import("UIDevice");
					var dev = UIDevice.currentDevice();  
					if (!dev.isBatteryMonitoringEnabled()) {  
					    dev.setBatteryMonitoringEnabled(true);  
					}  
					level =dev.batteryLevel();  
					return level
				}
				//#endif
				//#ifdef MP-WEIXIN
				wx.getBatteryInfo({
					success: function(e) {
						
						return e.level
					}
				})
				//#endif
				
				
				
				
			},
			formatSeconds(a,type) {
			     var hh = parseInt(a/3600);  
				  if(hh<10) hh = hh=='0'?'':`0${hh}:`;  
				  var mm = parseInt((a-hh*3600)/60);  
				  if(mm<10) mm = "0" + mm;  
				  var ss = parseInt((a-hh*3600)%60);  
				  if(ss<10) ss = "0" + ss;  
				  var length = hh  + mm + ":" + ss;  
				  if(a>=0){  
					return length;  
				  }else{  
					return "00:00:00";  
				  }  
			},
			getNowTime()
			    { 
			        var now = new Date();
			        var hh = now.getHours();            //时
			        var mm = now.getMinutes();          //分
			        return `${hh}:${mm}`; 
			}
		},
		watch:{
			
		},
		computed:{
			lastDuration(){
				return this.formatSeconds(this.duration)
			},
			currentDuration(){
				return this.formatSeconds(this.current)
			},
			touchCurrentDuration(){
				return this.formatSeconds(this.touchCurrent)
			},
		}
		
	}
</script>

<style scoped>
	
	/* #ifndef APP-PLUS-NVUE */
	@font-face {
		font-family: texticons;
		font-weight: normal;
		font-style: normal;
		src: url('~@/static/text-icon.ttf') format('truetype');
	}
	/* #endif*/
	
	.video-box{
		
		height: 200px;
		
	}
	.video{
		flex:1;
		width: 750rpx;
		
	}
	.move-view{
		
		
	}
	.video-view{
		
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif*/
		justify-content: center;
		align-items: center;
		position: absolute;
		
	}
	.list-icon {
		font-size: 18px;
		color: #fff;
		font-family: texticons;
		margin-right: 20rpx;
	}
	.list-title{
		font-size: 18px;
		color: #fff;
		margin-right: 20rpx;
		text-align: center;
	}
	.full-icon{
		font-size: 9px;
		color: #fff;
		font-family: texticons;
		margin-right: 10px;
	}
	.full-title{
		font-size: 9px;
		color: #fff;
		margin-right: 10px;
	}
	
	.controls-top{
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		
		/* #endif */
		
		
		background-image: linear-gradient(to top , rgba(0,0,0,0) , rgba(0,0,0,0.8));
		
		height: 40px;
		
		
		bottom: 0;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 0 40px;
	}
	.top-left{
		flex-direction: row;
		align-items: center;
		font-size: 12px;
		color: #fff;
	}
	.top-right{
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif */
		flex-direction: row;
		align-items: center;
		font-size: 12px;
		color: #fff;
	}
	.lock-view{
		position: absolute;
		margin: 40px;
		width: 30px;
		height: 30px;
		padding: 5px;
		transform: translateY(-30px);
		background-color: rgba(0,0,0,0.3);
		border-radius: 50%;
		
		text-align: center;
	}
	.rate{
		flex: 1;
		height: 160px;
		background-color: rgba(0,0,0,0);
		
		flex-direction: column;
		
	}
	.rate-view{
		position: absolute;
		height: 20px;
		transform: translateY(-10px);
		background-color: rgba(0,0,0,0);
		top:100px;
		
		right: 0;
		
		text-align: center;
	}
	.current-view{
		padding: 20rpx;
		width: 300rpx;
		height: 80px;
		background-color: rgba(0,0,0,0.3);
		flex-direction: column;
		justify-content: center;
		align-items: center;
		border-radius: 5px;
		position: absolute;
		top:30px;
		left: 225rpx;
	}
	.fullCurrent-view{
		background-color: rgba(0,0,0,0.3);
		flex-direction: column;
		justify-content: center;
		align-items: center;
		border-radius: 5px;
		width: 150px;
		height: 80px;
		top:60px;
		position: absolute;
	}
	.fullCurrent-bottom{
		width: 110px;
		border-radius: 3px;
		background-color: rgba(0,0,0,0.3);
		margin-top: 15px;
		height: 10px;
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif */
		overflow:hidden;
	}
	.fullCurrent-progress{
		background-color: rgba(235, 235, 235,0.8); 
		height: 10px;
	}
	.current-bottom{
		width: 260rpx;
		border-radius: 3px;
		background-color: rgba(0,0,0,0.3);
		margin-top: 15px;
		height: 10px;
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		/* #endif */
		overflow:hidden;
	}
	.current-progress{
		background-color: rgba(235, 235, 235,0.8); 
		height: 10px;
	}
	.rate-list{
		padding-top: 20px;
		flex-direction: row;
		justify-content: center;
	}
	.controls-view{
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		width: 730rpx;
		/* #endif */
		
		/* #ifdef APP-PLUS-NVUE */
		width: 750rpx;
		/* #endif */
		
		height: 40px;
		z-index: 99;
		position: absolute;
		background-color:rgba(0,0,0,0.3);
		bottom: 0;
		flex-direction: row;
		align-items: center;
		padding: 0 10rpx;
		
	}
	.fullControls-view{
		/* #ifndef APP-PLUS-NVUE */
		display: flex;
		
		/* #endif */
		
		background-image: linear-gradient(to bottom , rgba(0,0,0,0) , rgba(0,0,0,0.8));
		height: 40px;
		
		
		position: absolute;
		bottom: 0;
		
		flex-direction: row;
		align-items: center;
		padding: 0 40px;
	}
	.video-slider{
		z-index: 100;
		flex: 1;
	}
	
</style>
